[{"C:\\Users\\RITIKA\\Desktop\\Xmeme-Frontend\\src\\index.js":"1","C:\\Users\\RITIKA\\Desktop\\Xmeme-Frontend\\src\\reportWebVitals.js":"2","C:\\Users\\RITIKA\\Desktop\\Xmeme-Frontend\\src\\App.js":"3","C:\\Users\\RITIKA\\Desktop\\Xmeme-Frontend\\src\\Components\\Meme.js":"4","C:\\Users\\RITIKA\\Desktop\\Xmeme-Frontend\\src\\Components\\SwaggerButton.js":"5","C:\\Users\\RITIKA\\Desktop\\Xmeme-Frontend\\src\\Components\\Header.js":"6","C:\\Users\\RITIKA\\Desktop\\Xmeme-Frontend\\src\\Components\\Spinner.js":"7"},{"size":500,"mtime":1613289691688,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1613289692152,"results":"10","hashOfConfig":"9"},{"size":3186,"mtime":1613315989766,"results":"11","hashOfConfig":"9"},{"size":3699,"mtime":1613316007970,"results":"12","hashOfConfig":"9"},{"size":279,"mtime":1613315933874,"results":"13","hashOfConfig":"9"},{"size":213,"mtime":1613303110228,"results":"14","hashOfConfig":"9"},{"size":132,"mtime":1613289693199,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4n58lc",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\RITIKA\\Desktop\\Xmeme-Frontend\\src\\index.js",[],"C:\\Users\\RITIKA\\Desktop\\Xmeme-Frontend\\src\\reportWebVitals.js",[],"C:\\Users\\RITIKA\\Desktop\\Xmeme-Frontend\\src\\App.js",["32"],"import React ,{useState,useEffect}from 'react'\nimport './App.css'\nimport Meme from './Components/Meme'\nimport Header from './Components/Header'\nimport SwaggerButton from './Components/SwaggerButton'\nconst Backend_URL='https://ritikajain120600.pythonanywhere.com/'\n// const Backend_URL='http://localhost:8000/'\nfunction App() {\n  // Form field variables\n  const [Name,setName]=useState('')\n  const [Caption,setCaption]=useState('')\n  const [Image,setImage]=useState('')\n  const [Loading,setLoading]=useState(false)\n  const [Error,IsError]=useState(false)\n  const [Message,setMessage]=useState('')\n  // Function to upload memes\n  const UploadMeme=(e)=>{\n    e.preventDefault();\n    setLoading(true)\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    var data = JSON.stringify({\"name\":Name,\"caption\":Caption,\"url\":Image});\n\n      var requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: data,\n        redirect: 'follow'\n      };\n\n      fetch(`${Backend_URL}memes`, requestOptions)\n        .then(response => response.json())\n        .then(result => {\n          console.log(result)\n            setMessage('Uploaded Meme Successfully !!')\n            setName('')\n            setCaption('')\n            setImage('')\n          \n          setLoading(false)\n        })\n        .catch(error => console.log('error', error));\n  }\n  useEffect(()=>{\n    setTimeout(()=>{\n      setMessage('')\n    },2000)\n  },[Error,Loading])\n    return (\n    <div className=\"container-fluid\">\n      <Header/>\n      <br/>\n        <div>\n          <h3 style={{overflow:'hidden',color:'#fff'}}>&nbsp;&nbsp;&nbsp;Upload Meme</h3>\n        <form  className=\"meme_form\" onSubmit={UploadMeme}>\n          <div className=\"mb-3\">\n            <label htmlFor=\"name\" className=\"form-label labelHeading\" name=\"name\">Meme Owner</label>\n            <input for = \"name\" type=\"text\" placeholder=\"Enter your full name\"className=\"form-control\" id=\"name\" required value={Name} onChange={(e)=>setName(e.target.value)}/>\n          </div>\n          <div className=\"mb-3\">\n            <label htmlFor=\"caption\" className=\"form-label labelHeading\" name=\"caption\">Caption</label>\n            <input for=\"caption\" type=\"text\" placeholder=\"Be creative with the caption\"className=\"form-control\" id=\"caption\"  required value={Caption} onChange={(e)=>setCaption(e.target.value)}/>\n          </div>\n          <label htmlFor=\"meme_url\" className=\"form-label labelHeading\" name=\"url\">Meme URL</label>\n          <div className=\"input-group mb-3\">\n            <input for =\"url\" type=\"text\" placeholder=\"Enter URL of your meme here\" className=\"form-control \" id=\"meme_url\"  required value={Image} onChange={(e)=>setImage(e.target.value)}/>\n            <div className=\"input-group-append\">\n            <button type=\"submit\" className=\"btn btn-success\">{Loading?'Loading...':'Submit Meme'}</button>\n            </div>\n          </div>\n          <span style={Error?{color:'red'}:{color:'green'}}>{Message}</span>\n        </form>\n        </div>\n      <hr/>\n        <div>\n          <Meme Loading={Loading}/>\n        </div>\n      <SwaggerButton/>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\RITIKA\\Desktop\\Xmeme-Frontend\\src\\Components\\Meme.js",["33","34"],"import React ,{useState,useEffect}from 'react'\nimport Spinner from './Spinner'\nconst Backend_URL='https://ritikajain120600.pythonanywhere.com/'\nfunction Meme({Loading}) {\n    const [Memes,setMemes]=useState(undefined)\n    const [Limit,setLimit]=useState(100)\n    const [Fetching,setFetching]=useState(false)\n    const [Error,setError]=useState(false)\n    const [Message,setMessage]=useState('')\n    const [updating,setupdating]=useState(false)\n    const [Last,IsLast]=useState(false)\n\n    useEffect(()=>{\n        var requestOptions = {\n        method: 'GET',\n        redirect: 'follow'\n        };\n        setFetching(true)\n        fetch(`${Backend_URL}memes?limit=${Limit}`, requestOptions)\n        .then(response => response.json())\n        .then(result => {\n            result.reverse()\n            setMemes(result)\n            setFetching(false)\n        })\n        .catch(error => console.log('error', error));\n    },[Loading,Limit])\n  \n  useEffect(()=>{\n    setTimeout(()=>{\n        setMessage('')\n        setError(false)\n    },2000)\n  },[updating])\n\n  \n    return (\n    <div class=\"container\">\n        <div>\n            <div className=\"text-center\">\n                <p style={Error?{color:'red', fontWeight: 'bold'}:{color:'green', fontWeight: 'bold'}}> {Message}</p>\n            </div>\n            {\n                Memes?\n                <>\n                    {\n                        Memes.length>0?\n                        <>\n                        {\n                            <div className=\"row\">\n                                {Memes.map((items,index)=>{\n                                    return(\n                                        <div className=\"col-lg- card\" key={index} >\n                                            <div className=\"card-body\">\n                                                <div >\n                                                <h5 className=\"card-title\">{items.name}</h5>\n                                                </div>\n                                                <p className=\"card-text\">{items.caption}</p>\n                                                <img src={items.url} className=\"card-img-top\" alt=\" Not available\"/>\n                                            </div>\n                                        </div>\n                                    )\n                                })}\n                            </div>}\n                        }\n                        </>\n                        :\n                        <div style={{display:'flex',justifyContent:'center',alignItems:'center',height:'200px',flexDirection:'column',color:'#000',background:'#fff',borderRadius:'20px',}}>\n                        <p>No Memes uploaded</p>\n                        <p>(Be the first one to upload {':)'})</p>\n                        </div>\n                    }\n                </>\n                :\n                <div style={{display:'flex',justifyContent:'center',alignItems:'center',height:'200px',background:'#fff',borderRadius:'20px',flexDirection:'column',overflow:'hidden'}}>\n                    <Spinner/>\n                    <br/>\n                    <h3 style={{overflow:'hidden'}}>Loading...</h3>\n                </div>\n            }\n            <br/>\n            {\n                Memes?\n                Memes.length>0&&!Last?\n                <div style={{display:'flex',justifyContent:'center'}}>\n                <button className=\"btn btn-primary\" onClick={()=>setLimit(Limit+100)}>\n                    {Fetching?'Loading..':'Load More'}\n                </button>\n                </div>\n            :null\n            :null\n            }\n            \n        </div>\n    </div>\n        )    \n}\n\nexport default Meme\n","C:\\Users\\RITIKA\\Desktop\\Xmeme-Frontend\\src\\Components\\SwaggerButton.js",[],"C:\\Users\\RITIKA\\Desktop\\Xmeme-Frontend\\src\\Components\\Header.js",[],"C:\\Users\\RITIKA\\Desktop\\Xmeme-Frontend\\src\\Components\\Spinner.js",[],{"ruleId":"35","severity":1,"message":"36","line":14,"column":16,"nodeType":"37","messageId":"38","endLine":14,"endColumn":23},{"ruleId":"35","severity":1,"message":"39","line":10,"column":21,"nodeType":"37","messageId":"38","endLine":10,"endColumn":32},{"ruleId":"35","severity":1,"message":"40","line":11,"column":17,"nodeType":"37","messageId":"38","endLine":11,"endColumn":23},"no-unused-vars","'IsError' is assigned a value but never used.","Identifier","unusedVar","'setupdating' is assigned a value but never used.","'IsLast' is assigned a value but never used."]